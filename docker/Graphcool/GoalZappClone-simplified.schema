type ClonedStep @model {
  createdAt: DateTime!
  goalDoc: GoalDoc @relation(name: "ClonedStepOnGoalDoc")
  id: ID! @isUnique
  stepsId: String
  positionIndex: Int
  step: String!
  suggestedStep: Boolean
  suggester: User @relation(name: "ClonedStepOnUser")
  updatedAt: DateTime!
  suggestEdit: Boolean
  suggestMove: Boolean
  suggestRemove: Boolean
}

type File @model {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type GoalDoc @model {
  clonedSteps: [ClonedStep!]! @relation(name: "ClonedStepOnGoalDoc")
  createdAt: DateTime!
  goal: String
  id: ID! @isUnique
  owners: User @relation(name: "GoalDocOwner")
  steps: [Step!]! @relation(name: "GoalDocStep")
  updatedAt: DateTime!
  proxyAddress: String
}

type Step @model {
  createdAt: DateTime!
  goalDoc: GoalDoc @relation(name: "GoalDocStep")
  id: ID! @isUnique
  positionIndex: Int
  step: String!
  suggestedStep: Boolean
  updatedAt: DateTime!
}

type User @model {
  auth0UserId: String @isUnique
  clonedSteps: [ClonedStep!]! @relation(name: "ClonedStepOnUser")
  createdAt: DateTime!
  id: ID! @isUnique
  ownGoals: [GoalDoc!]! @relation(name: "GoalDocOwner")
  updatedAt: DateTime!
  userName: String! @isUnique @defaultValue(value: "")
  email: String @isUnique
  password: String
}